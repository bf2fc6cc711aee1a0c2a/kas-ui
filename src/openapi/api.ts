// tslint:disable
/**
 * Managed Service API
 * Managed Service API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

type AnyType = any
import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Cloud provider.
 * @export
 * @interface CloudProvider
 */
export interface CloudProvider {
    /**
     * Indicates the type of this object. Will be \'CloudProvider\' link.
     * @type {string}
     * @memberof CloudProvider
     */
    kind?: string;
    /**
     * Unique identifier of the object.
     * @type {string}
     * @memberof CloudProvider
     */
    id?: string;
    /**
     * Name of the cloud provider for display purposes.
     * @type {string}
     * @memberof CloudProvider
     */
    display_name?: string;
    /**
     * Human friendly identifier of the cloud provider, for example `aws`.
     * @type {string}
     * @memberof CloudProvider
     */
    name?: string;
    /**
     * Whether the cloud provider is enabled for deploying an OSD cluster.
     * @type {boolean}
     * @memberof CloudProvider
     */
    enabled: boolean;
}
/**
 *
 * @export
 * @interface CloudProviderList
 */
export interface CloudProviderList {
    /**
     *
     * @type {string}
     * @memberof CloudProviderList
     */
    kind: string;
    /**
     *
     * @type {number}
     * @memberof CloudProviderList
     */
    page: number;
    /**
     *
     * @type {number}
     * @memberof CloudProviderList
     */
    size: number;
    /**
     *
     * @type {number}
     * @memberof CloudProviderList
     */
    total: number;
    /**
     *
     * @type {Array<CloudProvider>}
     * @memberof CloudProviderList
     */
    items: Array<CloudProvider>;
}
/**
 *
 * @export
 * @interface CloudProviderListAllOf
 */
export interface CloudProviderListAllOf {
    /**
     *
     * @type {Array<CloudProvider>}
     * @memberof CloudProviderListAllOf
     */
    items?: Array<CloudProvider>;
}
/**
 * Description of a region of a cloud provider.
 * @export
 * @interface CloudRegion
 */
export interface CloudRegion {
    /**
     * Indicates the type of this object. Will be \'CloudRegion\'.
     * @type {string}
     * @memberof CloudRegion
     */
    kind?: string;
    /**
     * Unique identifier of the object.
     * @type {string}
     * @memberof CloudRegion
     */
    id?: string;
    /**
     * Name of the region for display purposes, for example `N. Virginia`.
     * @type {string}
     * @memberof CloudRegion
     */
    display_name?: string;
    /**
     * Whether the region is enabled for deploying an OSD cluster.
     * @type {boolean}
     * @memberof CloudRegion
     */
    enabled: boolean;
}
/**
 *
 * @export
 * @interface CloudRegionList
 */
export interface CloudRegionList {
    /**
     *
     * @type {string}
     * @memberof CloudRegionList
     */
    kind: string;
    /**
     *
     * @type {number}
     * @memberof CloudRegionList
     */
    page: number;
    /**
     *
     * @type {number}
     * @memberof CloudRegionList
     */
    size: number;
    /**
     *
     * @type {number}
     * @memberof CloudRegionList
     */
    total: number;
    /**
     *
     * @type {Array<CloudRegion>}
     * @memberof CloudRegionList
     */
    items: Array<CloudRegion>;
}
/**
 *
 * @export
 * @interface CloudRegionListAllOf
 */
export interface CloudRegionListAllOf {
    /**
     *
     * @type {Array<CloudRegion>}
     * @memberof CloudRegionListAllOf
     */
    items?: Array<CloudRegion>;
}
/**
 *
 * @export
 * @interface ErrorAllOf
 */
export interface ErrorAllOf {
    /**
     *
     * @type {string}
     * @memberof ErrorAllOf
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorAllOf
     */
    reason?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorAllOf
     */
    operation_id?: string;
}
/**
 *
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     *
     * @type {string}
     * @memberof ErrorList
     */
    kind: string;
    /**
     *
     * @type {number}
     * @memberof ErrorList
     */
    page: number;
    /**
     *
     * @type {number}
     * @memberof ErrorList
     */
    size: number;
    /**
     *
     * @type {number}
     * @memberof ErrorList
     */
    total: number;
    /**
     *
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    items: Array<Error>;
}
/**
 *
 * @export
 * @interface ErrorListAllOf
 */
export interface ErrorListAllOf {
    /**
     *
     * @type {Array<Error>}
     * @memberof ErrorListAllOf
     */
    items?: Array<Error>;
}
/**
 *
 * @export
 * @interface KafkaRequest
 */
export interface KafkaRequest {
    /**
     *
     * @type {string}
     * @memberof KafkaRequest
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequest
     */
    kind?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequest
     */
    href?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequest
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequest
     */
    cloud_provider?: string;
    /**
     *
     * @type {boolean}
     * @memberof KafkaRequest
     */
    multi_az?: boolean;
    /**
     *
     * @type {string}
     * @memberof KafkaRequest
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequest
     */
    owner?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequest
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequest
     */
    bootstrapServerHost?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequest
     */
    created_at?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequest
     */
    updated_at?: string;
}
/**
 *
 * @export
 * @interface KafkaRequestAllOf
 */
export interface KafkaRequestAllOf {
    /**
     *
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    cloud_provider?: string;
    /**
     *
     * @type {boolean}
     * @memberof KafkaRequestAllOf
     */
    multi_az?: boolean;
    /**
     *
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    owner?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    bootstrapServerHost?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    created_at?: string;
    /**
     *
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    updated_at?: string;
}
/**
 *
 * @export
 * @interface KafkaRequestList
 */
export interface KafkaRequestList {
    /**
     *
     * @type {string}
     * @memberof KafkaRequestList
     */
    kind: string;
    /**
     *
     * @type {number}
     * @memberof KafkaRequestList
     */
    page: number;
    /**
     *
     * @type {number}
     * @memberof KafkaRequestList
     */
    size: number;
    /**
     *
     * @type {number}
     * @memberof KafkaRequestList
     */
    total: number;
    /**
     *
     * @type {Array<KafkaRequest>}
     * @memberof KafkaRequestList
     */
    items: Array<KafkaRequest>;
}
/**
 *
 * @export
 * @interface KafkaRequestListAllOf
 */
export interface KafkaRequestListAllOf {
    /**
     *
     * @type {Array<KafkaRequest>}
     * @memberof KafkaRequestListAllOf
     */
    items?: Array<KafkaRequest>;
}
/**
 * Schema for the request body sent to /kafkas POST
 * @export
 * @interface KafkaRequestPayload
 */
export interface KafkaRequestPayload {
    /**
     * The cloud provider where the Kafka cluster will be created in
     * @type {string}
     * @memberof KafkaRequestPayload
     */
    cloud_provider?: string;
    /**
     * Set this to true to configure the Kafka cluster to be multiAZ
     * @type {boolean}
     * @memberof KafkaRequestPayload
     */
    multi_az?: boolean;
    /**
     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \'-\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.
     * @type {string}
     * @memberof KafkaRequestPayload
     */
    name: string;
    /**
     * The region where the Kafka cluster will be created in
     * @type {string}
     * @memberof KafkaRequestPayload
     */
    region?: string;
}
/**
 *
 * @export
 * @interface List
 */
export interface List {
    /**
     *
     * @type {string}
     * @memberof List
     */
    kind: string;
    /**
     *
     * @type {number}
     * @memberof List
     */
    page: number;
    /**
     *
     * @type {number}
     * @memberof List
     */
    size: number;
    /**
     *
     * @type {number}
     * @memberof List
     */
    total: number;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    kind?: string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    href?: string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    reason?: string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    operation_id?: string;
}
/**
 *
 * @export
 * @interface ObjectReference
 */
export interface ObjectReference {
    /**
     *
     * @type {string}
     * @memberof ObjectReference
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ObjectReference
     */
    kind?: string;
    /**
     *
     * @type {string}
     * @memberof ObjectReference
     */
    href?: string;
}
/**
 * Service Account created in MAS-SSO for the Kafka Cluster for authentication
 * @export
 * @interface ServiceAccount
 */
export interface ServiceAccount {
    /**
     * server generated unique id of the service account
     * @type {string}
     * @memberof ServiceAccount
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccount
     */
    kind?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccount
     */
    href?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccount
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccount
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccount
     */
    clientID?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccount
     */
    clientSecret?: string;
}
/**
 *
 * @export
 * @interface ServiceAccountAllOf
 */
export interface ServiceAccountAllOf {
    /**
     * server generated unique id of the service account
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    clientID?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    clientSecret?: string;
}
/**
 *
 * @export
 * @interface ServiceAccountList
 */
export interface ServiceAccountList extends ServiceAccountListAllOf {
}
/**
 *
 * @export
 * @interface ServiceAccountListAllOf
 */
export interface ServiceAccountListAllOf {
    /**
     *
     * @type {string}
     * @memberof ServiceAccountListAllOf
     */
    kind?: string;
    /**
     *
     * @type {Array<ServiceAccountListItem>}
     * @memberof ServiceAccountListAllOf
     */
    items?: Array<ServiceAccountListItem>;
}
/**
 *
 * @export
 * @interface ServiceAccountListItem
 */
export interface ServiceAccountListItem {
    /**
     * server generated unique id of the service account
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    kind?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    href?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    clientID?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    name?: string;
    /**
     *
     * @type {AnyType}
     * @memberof ServiceAccountListItem
     */
    description?: AnyType;
}
/**
 *
 * @export
 * @interface ServiceAccountListItemAllOf
 */
export interface ServiceAccountListItemAllOf {
    /**
     * server generated unique id of the service account
     * @type {string}
     * @memberof ServiceAccountListItemAllOf
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccountListItemAllOf
     */
    clientID?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceAccountListItemAllOf
     */
    name?: string;
    /**
     *
     * @type {AnyType}
     * @memberof ServiceAccountListItemAllOf
     */
    description?: AnyType;
}
/**
 * Schema for the request to create a service account
 * @export
 * @interface ServiceAccountRequest
 */
export interface ServiceAccountRequest {
    /**
     * The name of the service account
     * @type {string}
     * @memberof ServiceAccountRequest
     */
    name: string;
    /**
     * A description for the service account
     * @type {string}
     * @memberof ServiceAccountRequest
     */
    description?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new kafka Request
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'async' is not null or undefined
            if (async === null || async === undefined) {
                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');
            }
            // verify required parameter 'kafkaRequestPayload' is not null or undefined
            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {
                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');
            }
            const localVarPath = `/api/managed-services-api/v1/kafkas`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (async !== undefined) {
                localVarQueryParameter['async'] = async;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof kafkaRequestPayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a service account
         * @param {ServiceAccountRequest} serviceAccountRequest service account request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceAccountRequest' is not null or undefined
            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {
                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');
            }
            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof serviceAccountRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');
            }
            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');
            }
            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');
            }
            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves the list of supported regions of the supported cloud provider.
         * @param {string} id The id of record
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');
            }
            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves the list of supported cloud providers.
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns a list of Kafka requests
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results will be ordered by name.
         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: region, cloud_provider, multi_az, name, status. Allowed comparators are &#x60;&lt;&gt;&#x60; and &#x60;&#x3D;&#x60; For example, to retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned. Note. If the query is invalid, an error will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/managed-services-api/v1/kafkas`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List service accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary reset credentials for the service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');
            }
            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create a new kafka Request
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create a service account
         * @param {ServiceAccountRequest} serviceAccountRequest service account request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Delete a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Delete service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves the list of supported regions of the supported cloud provider.
         * @param {string} id The id of record
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Retrieves the list of supported cloud providers.
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Returns a list of Kafka requests
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results will be ordered by name.
         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: region, cloud_provider, multi_az, name, status. Allowed comparators are &#x60;&lt;&gt;&#x60; and &#x60;&#x3D;&#x60; For example, to retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned. Note. If the query is invalid, an error will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List service accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary reset credentials for the service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Create a new kafka Request
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {
            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a service account
         * @param {ServiceAccountRequest} serviceAccountRequest service account request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {
            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKafkaById(id: string, options?: any): AxiosPromise<Error> {
            return DefaultApiFp(configuration).deleteKafkaById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {
            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {
            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves the list of supported regions of the supported cloud provider.
         * @param {string} id The id of record
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {
            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves the list of supported cloud providers.
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {
            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns a list of Kafka requests
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results will be ordered by name.
         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: region, cloud_provider, multi_az, name, status. Allowed comparators are &#x60;&lt;&gt;&#x60; and &#x60;&#x3D;&#x60; For example, to retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned. Note. If the query is invalid, an error will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {
            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List service accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {
            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary reset credentials for the service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {
            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     *
     * @summary Create a new kafka Request
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;

    /**
     *
     * @summary Create a service account
     * @param {ServiceAccountRequest} serviceAccountRequest service account request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;

    /**
     *
     * @summary Delete a kafka request by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteKafkaById(id: string, options?: any): AxiosPromise<Error>;

    /**
     *
     * @summary Delete service account
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;

    /**
     *
     * @summary Get a kafka request by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;

    /**
     *
     * @summary Retrieves the list of supported regions of the supported cloud provider.
     * @param {string} id The id of record
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;

    /**
     *
     * @summary Retrieves the list of supported cloud providers.
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;

    /**
     *
     * @summary Returns a list of Kafka requests
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results will be ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: region, cloud_provider, multi_az, name, status. Allowed comparators are &#x60;&lt;&gt;&#x60; and &#x60;&#x3D;&#x60; For example, to retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned. Note. If the query is invalid, an error will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;

    /**
     *
     * @summary List service accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;

    /**
     *
     * @summary reset credentials for the service account
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     *
     * @summary Create a new kafka Request
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {
        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Create a service account
     * @param {ServiceAccountRequest} serviceAccountRequest service account request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {
        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete a kafka request by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteKafkaById(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteKafkaById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete service account
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteServiceAccount(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get a kafka request by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getKafkaById(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Retrieves the list of supported regions of the supported cloud provider.
     * @param {string} id The id of record
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {
        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Retrieves the list of supported cloud providers.
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listCloudProviders(page?: string, size?: string, options?: any) {
        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Returns a list of Kafka requests
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results will be ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: region, cloud_provider, multi_az, name, status. Allowed comparators are &#x60;&lt;&gt;&#x60; and &#x60;&#x3D;&#x60; For example, to retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned. Note. If the query is invalid, an error will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {
        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary List service accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceAccounts(options?: any) {
        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary reset credentials for the service account
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resetServiceAccountCreds(id: string, options?: any) {
        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));
    }

}


